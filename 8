import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report

# Load the data
def load_data():
    data = load_breast_cancer()
    return data.data, data.target, data.feature_names, data.target_names

# Train the decision tree
def train_model(X_train, y_train):
    model = DecisionTreeClassifier(random_state=42)
    model.fit(X_train, y_train)
    return model

# Plot the tree
def show_tree(model, feature_names):
    plt.figure(figsize=(12, 8))
    plot_tree(model, filled=True, feature_names=feature_names,
              class_names=["Malignant", "Benign"], rounded=True, proportion=True)
    plt.title("Decision Tree for Breast Cancer")
    plt.show()

# Classify one new sample
def classify_sample(model, sample):
    sample = np.array(sample).reshape(1, -1)
    return model.predict(sample)[0]

# Main function
def main():
    X, y, feature_names, target_names = load_data()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = train_model(X_train, y_train)
    y_pred = model.predict(X_test)

    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("\nReport:\n", classification_report(y_test, y_pred, target_names=target_names))

    show_tree(model, feature_names)

    sample = X_test[0]
    result = classify_sample(model, sample)
    print("\nClassified sample:", "Benign" if result == 1 else "Malignant")

if __name__ == "__main__":
    main()

