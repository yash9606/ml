import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
# Load the dataset
def load_data():
    faces = datasets.fetch_olivetti_faces(shuffle=True, random_state=42)
    return faces.data, faces.target
# Train and test split
def split_data(X, y):
    return train_test_split(X, y, test_size=0.2, random_state=42)
# Train the model
def train_model(X_train, y_train):
    model = GaussianNB()
    model.fit(X_train, y_train)
    return model
# Predict and show accuracy
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {accuracy * 100:.2f}%")
    return y_pred
# Show some predictions
def show_predictions(X_test, y_pred, n=5):
    plt.figure(figsize=(10, 5))
    for i in range(n):
        plt.subplot(1, n, i + 1)
        plt.imshow(X_test[i].reshape(64, 64), cmap='gray')
        plt.title(f"Pred: {y_pred[i]}")
        plt.axis('off')
    plt.show()
# Main function
def main():
    X, y = load_data()
    X_train, X_test, y_train, y_test = split_data(X, y)
    model = train_model(X_train, y_train)
    y_pred = evaluate_model(model, X_test, y_test)
    show_predictions(X_test, y_pred)
# Run the program
if __name__ == "__main__":
    main()
