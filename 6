import numpy as np
import matplotlib.pyplot as plt
np.random.seed(42)
X = np.linspace(0, 10, 100)
y = np.sin(X) + np.random.normal(scale=0.2, size=X.shape)
X = X[:, np.newaxis]
def locally_weighted_regression(X_train, y_train, query_point, tau):
    weights = np.exp(-np.sum((X_train - query_point)**2, axis=1) / (2 * tau**2))
    W = np.diag(weights)
    X_bias = np.hstack([np.ones_like(X_train), X_train])
    theta = np.linalg.inv(X_bias.T @ W @ X_bias) @ X_bias.T @ W @ y_train
    query_point_bias = np.array([1, query_point])
    return query_point_bias @ theta
def predict_lwr(X_train, y_train, X_test, tau):
    return np.array([locally_weighted_regression(X_train, y_train, x[0], tau) for x in X_test])
tau = 0.5
y_pred = predict_lwr(X, y, X, tau)
plt.figure(figsize=(10, 6))
plt.scatter(X, y, color="blue", s=10)
plt.plot(X, y_pred, color="red", linewidth=2)
plt.xlabel("X")
plt.ylabel("y")
plt.title("Locally Weighted Regression")
plt.grid(True)
plt.show()
